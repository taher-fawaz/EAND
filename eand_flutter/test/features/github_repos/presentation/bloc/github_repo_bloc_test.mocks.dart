// Mocks generated by Mockito 5.4.6 from annotations
// in eand_flutter/test/features/github_repos/presentation/bloc/github_repo_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:eand_flutter/src/core/errors/failures.dart' as _i6;
import 'package:eand_flutter/src/features/github_repos/domain/entities/github_commit_entity.dart'
    as _i10;
import 'package:eand_flutter/src/features/github_repos/domain/entities/github_repo_entity.dart'
    as _i7;
import 'package:eand_flutter/src/features/github_repos/domain/repositories/github_repository.dart'
    as _i2;
import 'package:eand_flutter/src/features/github_repos/domain/usecases/get_commits_usecase.dart'
    as _i9;
import 'package:eand_flutter/src/features/github_repos/domain/usecases/get_repositories_usecase.dart'
    as _i3;
import 'package:fpdart/fpdart.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGithubRepository_0 extends _i1.SmartFake
    implements _i2.GithubRepository {
  _FakeGithubRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetRepositoriesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRepositoriesUseCase extends _i1.Mock
    implements _i3.GetRepositoriesUseCase {
  MockGetRepositoriesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GithubRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGithubRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GithubRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i7.GithubRepoEntity>>> call(
    _i3.GetRepositoriesParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<
                  _i5.Either<_i6.Failure, List<_i7.GithubRepoEntity>>
                >.value(
                  _i8.dummyValue<
                    _i5.Either<_i6.Failure, List<_i7.GithubRepoEntity>>
                  >(this, Invocation.method(#call, [params])),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, List<_i7.GithubRepoEntity>>>);
}

/// A class which mocks [GetCommitsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCommitsUseCase extends _i1.Mock implements _i9.GetCommitsUseCase {
  MockGetCommitsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GithubRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeGithubRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.GithubRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, List<_i10.GithubCommitEntity>>> call(
    _i9.GetCommitsParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<
                  _i5.Either<_i6.Failure, List<_i10.GithubCommitEntity>>
                >.value(
                  _i8.dummyValue<
                    _i5.Either<_i6.Failure, List<_i10.GithubCommitEntity>>
                  >(this, Invocation.method(#call, [params])),
                ),
          )
          as _i4.Future<
            _i5.Either<_i6.Failure, List<_i10.GithubCommitEntity>>
          >);
}
