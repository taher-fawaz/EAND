// Mocks generated by Mockito 5.4.6 from annotations
// in eand_flutter/test/src/app_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:eand_flutter/src/features/github_repos/domain/usecases/get_commits_usecase.dart'
    as _i4;
import 'package:eand_flutter/src/features/github_repos/domain/usecases/get_repositories_usecase.dart'
    as _i3;
import 'package:eand_flutter/src/features/github_repos/presentation/bloc/github_repo_bloc.dart'
    as _i7;
import 'package:eand_flutter/src/features/github_repos/presentation/bloc/github_repo_event.dart'
    as _i9;
import 'package:eand_flutter/src/features/github_repos/presentation/bloc/github_repo_state.dart'
    as _i5;
import 'package:eand_flutter/src/routes/app_route_conf.dart' as _i6;
import 'package:flutter_bloc/flutter_bloc.dart' as _i10;
import 'package:go_router/go_router.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGoRouter_0 extends _i1.SmartFake implements _i2.GoRouter {
  _FakeGoRouter_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetRepositoriesUseCase_1 extends _i1.SmartFake
    implements _i3.GetRepositoriesUseCase {
  _FakeGetRepositoriesUseCase_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetCommitsUseCase_2 extends _i1.SmartFake
    implements _i4.GetCommitsUseCase {
  _FakeGetCommitsUseCase_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGithubRepoState_3 extends _i1.SmartFake
    implements _i5.GithubRepoState {
  _FakeGithubRepoState_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AppRouteConf].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppRouteConf extends _i1.Mock implements _i6.AppRouteConf {
  MockAppRouteConf() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GoRouter get router =>
      (super.noSuchMethod(
            Invocation.getter(#router),
            returnValue: _FakeGoRouter_0(this, Invocation.getter(#router)),
          )
          as _i2.GoRouter);
}

/// A class which mocks [GithubRepoBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRepoBloc extends _i1.Mock implements _i7.GithubRepoBloc {
  MockGithubRepoBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.GetRepositoriesUseCase get getRepositoriesUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getRepositoriesUseCase),
            returnValue: _FakeGetRepositoriesUseCase_1(
              this,
              Invocation.getter(#getRepositoriesUseCase),
            ),
          )
          as _i3.GetRepositoriesUseCase);

  @override
  _i4.GetCommitsUseCase get getCommitsUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getCommitsUseCase),
            returnValue: _FakeGetCommitsUseCase_2(
              this,
              Invocation.getter(#getCommitsUseCase),
            ),
          )
          as _i4.GetCommitsUseCase);

  @override
  _i5.GithubRepoState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeGithubRepoState_3(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i5.GithubRepoState);

  @override
  _i8.Stream<_i5.GithubRepoState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i8.Stream<_i5.GithubRepoState>.empty(),
          )
          as _i8.Stream<_i5.GithubRepoState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  void add(_i9.GithubRepoEvent? event) => super.noSuchMethod(
    Invocation.method(#add, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void onEvent(_i9.GithubRepoEvent? event) => super.noSuchMethod(
    Invocation.method(#onEvent, [event]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i5.GithubRepoState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void on<E extends _i9.GithubRepoEvent>(
    _i10.EventHandler<E, _i5.GithubRepoState>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) => super.noSuchMethod(
    Invocation.method(#on, [handler], {#transformer: transformer}),
    returnValueForMissingStub: null,
  );

  @override
  void onTransition(
    _i10.Transition<_i9.GithubRepoEvent, _i5.GithubRepoState>? transition,
  ) => super.noSuchMethod(
    Invocation.method(#onTransition, [transition]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void onChange(_i10.Change<_i5.GithubRepoState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );
}
