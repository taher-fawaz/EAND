// Mocks generated by Mockito 5.4.6 from annotations
// in eand_flutter/test/features/github_repos/data/repositories/github_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:eand_flutter/src/core/errors/failures.dart' as _i9;
import 'package:eand_flutter/src/core/network/network_checker.dart' as _i7;
import 'package:eand_flutter/src/features/github_repos/data/datasources/github_local_datasource.dart'
    as _i6;
import 'package:eand_flutter/src/features/github_repos/data/datasources/github_remote_datasource.dart'
    as _i2;
import 'package:eand_flutter/src/features/github_repos/data/models/github_commit_model.dart'
    as _i5;
import 'package:eand_flutter/src/features/github_repos/data/models/github_repo_model.dart'
    as _i4;
import 'package:fpdart/fpdart.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GithubRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubRemoteDataSource extends _i1.Mock
    implements _i2.GithubRemoteDataSource {
  MockGithubRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.GithubRepoModel>> getRepositories(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#getRepositories, [username]),
            returnValue: _i3.Future<List<_i4.GithubRepoModel>>.value(
              <_i4.GithubRepoModel>[],
            ),
          )
          as _i3.Future<List<_i4.GithubRepoModel>>);

  @override
  _i3.Future<List<_i5.GithubCommitModel>> getCommits(
    String? owner,
    String? repo, {
    int? perPage = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCommits, [owner, repo], {#perPage: perPage}),
            returnValue: _i3.Future<List<_i5.GithubCommitModel>>.value(
              <_i5.GithubCommitModel>[],
            ),
          )
          as _i3.Future<List<_i5.GithubCommitModel>>);
}

/// A class which mocks [GithubLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockGithubLocalDataSource extends _i1.Mock
    implements _i6.GithubLocalDataSource {
  MockGithubLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.GithubRepoModel>> getRepositories(String? username) =>
      (super.noSuchMethod(
            Invocation.method(#getRepositories, [username]),
            returnValue: _i3.Future<List<_i4.GithubRepoModel>>.value(
              <_i4.GithubRepoModel>[],
            ),
          )
          as _i3.Future<List<_i4.GithubRepoModel>>);

  @override
  _i3.Future<List<_i5.GithubCommitModel>> getCommits(
    String? owner,
    String? repo, {
    int? perPage = 3,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getCommits, [owner, repo], {#perPage: perPage}),
            returnValue: _i3.Future<List<_i5.GithubCommitModel>>.value(
              <_i5.GithubCommitModel>[],
            ),
          )
          as _i3.Future<List<_i5.GithubCommitModel>>);

  @override
  _i3.Future<void> cacheRepositories(
    String? username,
    List<_i4.GithubRepoModel>? repositories,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheRepositories, [username, repositories]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> cacheCommits(
    String? owner,
    String? repo,
    List<_i5.GithubCommitModel>? commits,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#cacheCommits, [owner, repo, commits]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i7.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get checkIsConnected =>
      (super.noSuchMethod(
            Invocation.getter(#checkIsConnected),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  bool get getIsConnected =>
      (super.noSuchMethod(
            Invocation.getter(#getIsConnected),
            returnValue: false,
          )
          as bool);

  @override
  set setIsConnected(bool? val) => super.noSuchMethod(
    Invocation.setter(#setIsConnected, val),
    returnValueForMissingStub: null,
  );

  @override
  _i3.Future<_i8.Either<_i9.Failure, T>> check<T>({
    required _i3.Future<_i8.Either<_i9.Failure, T>> Function()? onConnected,
    required _i3.Future<_i8.Either<_i9.Failure, T>> Function()? onNotConnected,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#check, [], {
              #onConnected: onConnected,
              #onNotConnected: onNotConnected,
            }),
            returnValue: _i3.Future<_i8.Either<_i9.Failure, T>>.value(
              _i10.dummyValue<_i8.Either<_i9.Failure, T>>(
                this,
                Invocation.method(#check, [], {
                  #onConnected: onConnected,
                  #onNotConnected: onNotConnected,
                }),
              ),
            ),
          )
          as _i3.Future<_i8.Either<_i9.Failure, T>>);
}
